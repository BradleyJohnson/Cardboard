<h3>Dashboard</h3>

<div class="hidden">
  <%= @results.to_json %>
</div>

<canvas id="myChart"></canvas>



<div id="user-comments">
  <h3 class="inline-block">Comments</h3><span class="glyphicon glyphicon-menu-up light-grey" aria-hidden="true" id="comments-toggle"></span><span class="glyphicon glyphicon-comment light-grey" aria-hidden="true" id="comment-form-toggle"></span>

  <div id="comment-form">
    <%= form_for @comment, html: {class: "form-horizontal"} do |f| %>

      <%= f.hidden_field :commentable_type, :value => @user.class %>
      <%= f.hidden_field :commentable_id, :value => @user.id %>
      <%= f.hidden_field :user_id, :value => current_user.id %>

      <div class="form-group">
        <%= f.text_field :title, placeholder: "Title", class: "col-md-8 styled-input", id: "comment-title" %>
      </div>

      <div class="form-group">
        <%= f.text_area :body, placeholder: "Body", class: "col-md-8 styled-input", id: "comment-body" %>
      </div>

      <div class="form-group">
        <%= f.submit class: "btn btn-primary outline", id: "add-comment" %>
        <%= link_to "Cancel", user_path(@user), class: "btn btn-primary outline" %>
      </div>

    <% end %>
  </div>

  <div id="comments-list">
    <% @user.comments.each do |comment| %>
      <div class="well">
        <h4><%= comment.user.username  %></h4>
        <hr>
        <p >
          <strong><%= comment.title %></strong>
        </p>
        <p >
          <%= comment.body %>
        </p>
      </div>
    <% end %>
  </div>

</div>

<script charset="utf-8">
  $(document).ready(function() {
    String.prototype.trunc = String.prototype.trunc ||
      function(n){
          return this.length>n ? this.substr(0,n-1)+'...' : this;
      };



    var ctx = $("#myChart").get(0).getContext("2d");

    var mechanics = [];
    var wins = [];
    var losses = [];

    var results = JSON.parse($("div.hidden").html());
    for (var i = 0; i < results.length; i++) {
      mechanics.push(results[i].mechanic_type.trunc(15));
      wins.push(parseInt(results[i].wins));
      losses.push(parseInt(results[i].losses));
    }

    var data = {
      labels: mechanics,
      datasets: [
                  {
                      label: "Wins",
                      fillColor: "rgba(236,196,54,0.5)",
                      strokeColor: "rgba(236,196,54,0.5)",
                      highlightFill: "rgba(236,196,54,0.5)",
                      highlightStroke: "rgba(236,196,54,0.5)",
                      data: wins
                  },
                  {
                      label: "Losses",
                      fillColor: "rgba(79, 79, 79, 0.5)",
                      strokeColor: "rgba(79, 79, 79, 0.8)",
                      highlightFill: "rgba(79, 79, 79, 0.75)",
                      highlightStroke: "rgba(79, 79, 79, 1)",
                      data: losses
                  }
                ]
    };

    var myBarChart = new Chart(ctx).Bar(data, {
      scaleFontColor : "#ddd",
      scaleFontSize: 12,
      scaleShowVerticalLines: false,
      scaleGridLineColor : "#ddd",
    });


  });

</script>
